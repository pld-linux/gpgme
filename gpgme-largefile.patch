--- gpgme-1.3.1/src/gpgme-config.in.orig	2011-04-07 14:24:03.000000000 +0200
+++ gpgme-1.3.1/src/gpgme-config.in	2011-06-18 08:59:14.834695342 +0200
@@ -45,6 +45,10 @@
 cflags_glib="@GLIB_CFLAGS@"
 with_glib=
 
+if test "0@NEED__FILE_OFFSET_BITS@" -gt "0" ; then
+    cflags_lfs="-D_FILE_OFFSET_BITS=@NEED__FILE_OFFSET_BITS@"
+fi
+
 output=""
 
 usage()
@@ -136,6 +140,9 @@
                   result="$result $i"
               fi
             done
+	    if test "x$cflags_lfs" != "x"; then
+		output="$output $cflags_lfs"
+	    fi
             output="$output $result"
             ;;
 	--libs)
--- gpgme-1.7.0/configure.ac.orig	2016-09-21 09:18:01.000000000 +0200
+++ gpgme-1.7.0/configure.ac	2016-10-08 08:46:21.898705647 +0200
@@ -529,15 +529,18 @@
 # A simple compile time check in gpgme.h for GNU/Linux systems that
 # prevents a file offset bits mismatch between gpgme and the application.
 NEED__FILE_OFFSET_BITS=0
+FILE_OFFSET_BITS_CPPFLAGS=
 if test "$have_w32_system" != yes; then
   case "$ac_cv_sys_file_offset_bits" in
     "" | no | unknown) ;;
     *)
     NEED__FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits
+    FILE_OFFSET_BITS_CPPFLAGS="-D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits"
     ;;
   esac
 fi
 AC_SUBST(NEED__FILE_OFFSET_BITS)
+AC_SUBST(FILE_OFFSET_BITS_CPPFLAGS)
 
 # Figure out platform dependent typedefs for gpgme.h
 if test "$have_w32_system" = yes; then
--- gpgme-1.13.0/lang/cpp/src/Makefile.am.orig	2019-03-28 17:43:11.439122747 +0100
+++ gpgme-1.13.0/lang/cpp/src/Makefile.am	2019-03-28 18:21:29.420006850 +0100
@@ -65,7 +65,7 @@
                         $(interface_headers) $(private_gpgmepp_headers)
 
 AM_CPPFLAGS = -I$(top_builddir)/src \
-              @GPGME_CPP_CFLAGS@ @GPG_ERROR_CFLAGS@ @LIBASSUAN_CFLAGS@ \
+              @GPGME_CPP_CFLAGS@ @GPG_ERROR_CFLAGS@ @LIBASSUAN_CFLAGS@ @FILE_OFFSET_BITS_CPPFLAGS@ \
               -DBUILDING_GPGMEPP -Wsuggest-override \
               -Wzero-as-null-pointer-constant
 
--- gpgme-1.13.0/lang/python/setup.py.in.orig	2018-12-03 10:37:25.000000000 +0100
+++ gpgme-1.13.0/lang/python/setup.py.in	2019-03-28 18:23:59.565860107 +0100
@@ -87,9 +87,8 @@
 define_macros = []
 libs = getconfig('libs')
 
-# Define extra_macros for both the SWIG and C code
+# append extra_macros to define_macros
 for k, v in extra_macros.items():
-    extra_swig_opts.append('-D{0}={1}'.format(k, v))
     define_macros.append((k, str(v)))
 
 for item in getconfig('cflags'):
@@ -102,6 +101,10 @@
         else:
             define_macros.append((defitem[0], None))
 
+# use define_macros for both the SWIG and C code
+for k,v in define_macros:
+    extra_swig_opts.append("-D{0}={1}".format(k, v))
+
 # Adjust include and library locations in case of win32
 uname_s = os.popen('uname -s').read()
 if uname_s.startswith('MINGW32'):
--- gpgme-1.13.0/lang/qt/src/Makefile.am.orig	2019-03-28 17:43:11.439122747 +0100
+++ gpgme-1.13.0/lang/qt/src/Makefile.am	2019-03-28 18:21:48.163238642 +0100
@@ -218,7 +218,7 @@
 libqgpgme_la_SOURCES = $(qgpgme_sources) $(qgpgme_headers) $(private_qgpgme_headers)
 
 AM_CPPFLAGS = -I$(top_srcdir)/lang/cpp/src -I$(top_builddir)/src \
-              @GPGME_QT_CFLAGS@ @GPG_ERROR_CFLAGS@ @LIBASSUAN_CFLAGS@ \
+              @GPGME_QT_CFLAGS@ @GPG_ERROR_CFLAGS@ @LIBASSUAN_CFLAGS@ @FILE_OFFSET_BITS_CPPFLAGS@ \
               -DBUILDING_QGPGME -Wsuggest-override \
               -Wzero-as-null-pointer-constant
 
--- gpgme-1.7.0/lang/qt/tests/Makefile.am.orig	2016-09-20 19:09:38.000000000 +0200
+++ gpgme-1.7.0/lang/qt/tests/Makefile.am	2016-10-08 09:37:15.642004112 +0200
@@ -38,7 +38,7 @@
 
 AM_CPPFLAGS = -I$(top_srcdir)/lang/cpp/src -I$(top_builddir)/src \
               @GPG_ERROR_CFLAGS@ @GPGME_QT_CFLAGS@ @GPG_ERROR_CFLAGS@ \
-              @LIBASSUAN_CFLAGS@ @GPGME_QTTEST_CFLAGS@ -DBUILDING_QGPGME \
+              @LIBASSUAN_CFLAGS@ @GPGME_QTTEST_CFLAGS@ @FILE_OFFSET_BITS_CPPFLAGS@ -DBUILDING_QGPGME \
               -I$(top_srcdir)/lang/qt/src \
               -DTOP_SRCDIR="$(top_srcdir)"
 
